{"remainingRequest":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/src/components/LoginPage/register/index.vue?vue&type=template&id=113d556d&scoped=true&","dependencies":[{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/src/components/LoginPage/register/index.vue","mtime":1602995600245},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}