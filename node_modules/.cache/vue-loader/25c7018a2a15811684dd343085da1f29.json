{"remainingRequest":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/src/components/DataAnalysis/TrajectoryData/index.vue?vue&type=style&index=0&id=6f5ad9a4&scoped=true&lang=css&","dependencies":[{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/src/components/DataAnalysis/TrajectoryData/index.vue","mtime":1599243822032},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lebronchao/Desktop/Web Project/Big_Data_Visualization/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudHJhamVjdG9yeSB7CiAgaGVpZ2h0OiAzOHJlbTsKICBib3JkZXI6IDFyZW0gc29saWQgd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogMXJlbTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/DataAnalysis/TrajectoryData","sourcesContent":["<template>\n  <div>\n    <div class=\"trajectory\" id=\"tra-map\">\n    </div>\n  </div>\n</template>\n<script type=\"text/javascript\"\n        src=\"http://api.map.baidu.com/getscript?type=webgl&v=1.0&ak=lSZms8vUZ0bZns6rVHLWe3RQLaovokQM&services=&t=20200825103044\"></script>\n<script src=\"http://api.map.baidu.com/getscript?v=2.0&ak=lSZms8vUZ0bZns6rVHLWe3RQLaovokQM\"></script>\n<script type=\"text/javascript\" src=\"//api.map.baidu.com/library/TrackAnimation/src/TrackAnimation_min.js\"></script>\n<script>\nimport {trajRequest} from '../../../api/HomePage/DataAnalysis'\n\nexport default {\n  name: \"index\",\n  data() {\n    return {\n      path: [\n        {\n          'lng': 114.405112,\n          'lat': 22.709605\n        },\n        {\n          'lng': 114.40478,\n          'lat': 22.710089\n        },\n        {\n          'lng': 114.404856,\n          'lat': 22.710164\n        }, {\n          'lng': 114.405606,\n          'lat': 22.710547\n        }, {\n          'lng': 114.406909,\n          'lat': 22.711168\n        }, {\n          'lng': 114.407839,\n          'lat': 22.711456\n        }, {\n          'lng': 114.409837,\n          'lat': 22.711576\n        }, {\n          'lng': 114.411589,\n          'lat': 22.711601\n        }, {\n          'lng': 114.412932,\n          'lat': 22.711568\n        }, {\n          'lng': 114.412887,\n          'lat': 22.710347\n        }, {\n          'lng': 114.41273,\n          'lat': 22.709055\n        }]\n    }\n  },\n  methods: {\n    wgs84togcj02tobd09 (lng, lat) {\n      const xPI = 3.14159265358979324 * 3000.0 / 180.0\n      const PI = 3.1415926535897932384626\n      const a = 6378245.0\n      const ee = 0.00669342162296594323\n      // WGS84转GCj02\n      let dlat = this.transformlat(lng - 105.0, lat - 35.0)\n      let dlng = this.transformlng(lng - 105.0, lat - 35.0)\n      let radlat = lat / 180.0 * PI\n      let magic = Math.sin(radlat)\n      magic = 1 - ee * magic * magic\n      let sqrtmagic = Math.sqrt(magic)\n      dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI)\n      dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI)\n      let mglat = lat + dlat\n      let mglng = lng + dlng\n      // 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换\n      let z = Math.sqrt(mglng * mglng + mglat * mglat) + 0.00002 * Math.sin(mglat * xPI)\n      let theta = Math.atan2(mglat, mglng) + 0.000003 * Math.cos(mglng * xPI)\n      let bdlng = z * Math.cos(theta) + 0.0065\n      let bdlat = z * Math.sin(theta) + 0.006\n      // return [bdlng, bdlat]\n      return {lng: bdlng, lat: bdlat}\n    },\n    transformlat (lng, lat) {\n      const PI = 3.1415926535897932384626\n      let ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng))\n      ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0\n      ret += (20.0 * Math.sin(lat * PI) + 40.0 * Math.sin(lat / 3.0 * PI)) * 2.0 / 3.0\n      ret += (160.0 * Math.sin(lat / 12.0 * PI) + 320 * Math.sin(lat * PI / 30.0)) * 2.0 / 3.0\n      return ret\n    },\n    transformlng (lng, lat) {\n      const PI = 3.1415926535897932384626\n      let ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng))\n      ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0\n      ret += (20.0 * Math.sin(lng * PI) + 40.0 * Math.sin(lng / 3.0 * PI)) * 2.0 / 3.0\n      ret += (150.0 * Math.sin(lng / 12.0 * PI) + 300.0 * Math.sin(lng / 30.0 * PI)) * 2.0 / 3.0\n      return ret\n    },\n    async mapInit() {\n      var bmap = new BMapGL.Map(\"tra-map\");\n      var convertor = new BMap.Convertor();\n      bmap.centerAndZoom(new BMapGL.Point(114.40555, 22.707533), 16);    // 初始化地图，设置中心点坐标和地图级别\n      bmap.enableScrollWheelZoom(true);// 开启鼠标滚轮缩放\n      let scaleCtrl = new BMapGL.ScaleControl({anchor: BMAP_ANCHOR_BOTTOM_RIGHT});  // 添加比例尺控件\n      bmap.addControl(scaleCtrl);\n      let zoomCtrl = new BMapGL.ZoomControl({anchor: BMAP_ANCHOR_TOP_RIGHT});  // 添加缩放控件\n      bmap.addControl(zoomCtrl);\n      let navi3DCtrl = new BMapGL.NavigationControl3D();  // 添加3D控件\n      bmap.addControl(navi3DCtrl);\n\n      var points = [];\n\n      for (var i = 0; i < this.path.length; i++) {\n        points.push(new BMapGL.Point(this.path[i].lng, this.path[i].lat));\n      }\n      // console.log(points)\n      // convertor.translate(points,1,5,callback)\n      // function callback(){\n      //   console.log(points)\n      var pl = new BMapGL.Polyline(points);\n      var trackAni = new BMapGLLib.TrackAnimation(bmap, pl, {\n        overallView: true, // 动画完成后自动调整视野到总览\n        tilt: 30,          // 轨迹播放的角度，默认为55\n        duration: 2000,   // 动画持续时长，默认为10000，单位ms\n        delay: 1000        // 动画开始的延迟，默认0，单位ms\n      });\n      trackAni.start();\n    //}\n\n    }\n  },\n  async mounted() {\n    await trajRequest(this)\n  }\n}\n</script>\n\n<style scoped>\n.trajectory {\n  height: 38rem;\n  border: 1rem solid white;\n  border-radius: 1rem;\n}\n</style>"]}]}